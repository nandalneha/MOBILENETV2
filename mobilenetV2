# -*- coding: utf-8 -*-
"""FACE_ANTISPOOF_MOBILENETV2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HOIzNZKQMZfwXUVjtNgov3np9lMQLYVC
"""
# Install necessary libraries
!pip install tensorflow scikit-learn

# Import libraries
import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.applications import MobileNetV2
from tensorflow.keras.layers import Dense, GlobalAveragePooling2D, Dropout
from tensorflow.keras.models import Model
from tensorflow.keras.optimizers import Adam
from sklearn.metrics import classification_report, confusion_matrix
import numpy as np
import os
import zipfile

# Check TensorFlow version and GPU availability
print(f"TensorFlow version: {tf.__version__}")
print(f"GPU is {'available' if tf.config.list_physical_devices('GPU') else 'NOT AVAILABLE'}")

from google.colab import drive
drive.mount('/content/drive')

# Define paths to datasets in Google Drive
source_dataset_path = '/content/drive/MyDrive/datasets/RA1'
target_datasets_paths = {
    'Idiap': '/content/drive/MyDrive/datasets/I1',
    'ASIAFASD': '/content/drive/MyDrive/datasets/CAF1',
    'CelebA': '/content/drive/MyDrive/datasets/CelA1'
}

# Unzip datasets if needed (optional, depending on how your datasets are stored)
# with zipfile.ZipFile(source_dataset_path + '.zip', 'r') as zip_ref:
#     zip_ref.extractall('/content/ReplayAttack')

# Repeat for target datasets...

# Create ImageDataGenerators for data augmentation
train_datagen = ImageDataGenerator(rescale=1./255, rotation_range=20, width_shift_range=0.2,
                                   height_shift_range=0.2, shear_range=0.2, zoom_range=0.2,
                                   horizontal_flip=True, fill_mode='nearest')

val_datagen = ImageDataGenerator(rescale=1./255)

# Load Replay Attack dataset for training
train_generator = train_datagen.flow_from_directory(
    source_dataset_path + '/train',
    target_size=(224, 224),
    batch_size=32,
    class_mode='binary'
)

val_generator = val_datagen.flow_from_directory(
    source_dataset_path + '/val',
    target_size=(224, 224),
    batch_size=32,
    class_mode='binary'
)

# Load the pre-trained MobileNetV2 model
base_model = MobileNetV2(weights='imagenet', include_top=False, input_shape=(224, 224, 3))

# Freeze the base model
base_model.trainable = False

# Add custom layers on top of the base model
x = base_model.output
x = GlobalAveragePooling2D()(x)
x = Dropout(0.3)(x)
x = Dense(128, activation='relu')(x)
x = Dropout(0.3)(x)
predictions = Dense(1, activation='sigmoid')(x)

# Define the final model
model = Model(inputs=base_model.input, outputs=predictions)
model.summary()

# Compile the model
model.compile(optimizer=Adam(learning_rate=0.001),
              loss='binary_crossentropy',
              metrics=['accuracy'])

# Train the model
history = model.fit(
    train_generator,
    epochs=10,
    validation_data=val_generator
)

# Load and evaluate on target datasets
for target_name, target_path in target_datasets_paths.items():
    target_generator = val_datagen.flow_from_directory(
        target_path + '/test',
        target_size=(224, 224),
        batch_size=32,
        class_mode='binary',
        shuffle=False
    )

    # Evaluate model on the target dataset
    target_loss, target_accuracy = model.evaluate(target_generator)
    print(f'{target_name} - Loss: {target_loss}, Accuracy: {target_accuracy}')

    # Generate classification report
    predictions = model.predict(target_generator)
    y_pred = np.where(predictions > 0.5, 1, 0)
    y_true = target_generator.classes
    print(f'Classification Report for {target_name}:\n')
    print(classification_report(y_true, y_pred, target_names=target_generator.class_indices.keys()))

# Save the trained model
model.save('/content/drive/MyDrive/antispoofing_mobilenetv2.h5')

from tensorflow.keras.preprocessing import image

def predict_spoof(img_path, model):
    img = image.load_img(img_path, target_size=(224, 224))
    img_array = image.img_to_array(img) / 255.0
    img_array = np.expand_dims(img_array, axis=0)

    prediction = model.predict(img_array)
    return 'Spoof' if prediction < 0.5 else 'Real'

# Example usage
img_path = '/content/drive/MyDrive/some_test_image.jpg'  # Replace with an actual image path
result = predict_spoof(img_path, model)
print(f'The image is {result}')
